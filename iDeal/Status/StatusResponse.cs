using System;
using System.Xml.Linq;
using iDeal.Base;

namespace iDeal.Status
{
    public class StatusResponse : iDealResponse
    {
        /// <summary>
        /// Acquirer id (first four digits) + unique id generated by acquirer (last 12 digits)
        /// </summary>
        public string TransactionId { get; private set; }

        /// <summary>
        /// Status: success, cancelled, expired, failure or open
        /// </summary>
        public Status Status { get; private set; }

        /// <summary>
        /// Consumer name
        /// </summary>
        public string ConsumerName { get; private set; }

        /// <summary>
        /// Accountnumber of consumer
        /// </summary>
        public string ConsumerIBAN { get; private set; }

        /// <summary>
        /// Thumbprint of public certificate
        /// </summary>
        public string Fingerprint { get; private set; }

        /// <summary>
        /// Digital signature provided by the bank/acceptant
        /// </summary>
        public string SignatureValue { get; private set; }

        /// <summary>
        /// Concatenation of speficied fields from the reponse, used for digital signature
        /// </summary>
        public string MessageDigest
        {
            get
            {
                return CreateDateTimestamp + TransactionId + Status + (Status == Status.Success ? ConsumerIBAN : "");
            }
        }

        /// <summary>
        /// Consumer city
        /// </summary>
        public string ConsumerBIC { get; private set; }

        public StatusResponse(string xmlStatusResponse)
        {
            // Parse document
            XElement xDocument = XElement.Parse(xmlStatusResponse);

            // Create datetimestamp
            CreateDateTimestamp = (xDocument.Element(Xml.Ns + "createDateTimestamp").Value);

            // Acquirer id
            AcquirerId = (int) xDocument.Element(Xml.Ns + "Acquirer").Element(Xml.Ns + "acquirerID");

            // TransactionId
            TransactionId = xDocument.Element(Xml.Ns + "Transaction").Element(Xml.Ns + "transactionID").Value;

            // Status
            switch (xDocument.Element(Xml.Ns + "Transaction").Element(Xml.Ns + "status").Value)
            {
                case "Success":
                    Status = Status.Success;
                    break;
                case "Cancelled":
                    Status = Status.Cancelled;
                    break;
                case "Expired":
                    Status = Status.Expired;
                    break;
                case "Failure":
                    Status = Status.Failure;
                    break;
                case "Open":
                    Status = Status.Open;
                    break;
                default:
                    throw new InvalidOperationException("Received unknown status");
            }

            if (Status == Status.Success)
            {
                // Consumer name
                ConsumerName = xDocument.Element(Xml.Ns + "Transaction").Element(Xml.Ns + "consumerName").Value;

                // Consumer account number
                ConsumerIBAN = xDocument.Element(Xml.Ns + "Transaction").Element(Xml.Ns + "consumerIBAN").Value;

                // Consumer city
                ConsumerBIC = xDocument.Element(Xml.Ns + "Transaction").Element(Xml.Ns + "consumerBIC").Value;
            }
        }
    }
}